// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bots.sql

package db

import (
	"context"
	"database/sql"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots (id, author, name, description) 
VALUES (?1, ?2, ?3, ?4)
RETURNING id, author, name, description, status, created_at
`

type CreateBotParams struct {
	ID          string `json:"id"`
	Author      string `json:"author"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, createBot,
		arg.ID,
		arg.Author,
		arg.Name,
		arg.Description,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBot = `-- name: DeleteBot :exec
DELETE FROM bots
WHERE id = ?1
`

func (q *Queries) DeleteBot(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBot, id)
	return err
}

const getBot = `-- name: GetBot :one
SELECT id, author, name, description, status, created_at FROM bots
WHERE id = ?1
`

func (q *Queries) GetBot(ctx context.Context, id string) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBot, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listBots = `-- name: ListBots :many
SELECT id, author, name, description, status, created_at FROM bots
ORDER BY created_at DESC
LIMIT ?1 OFFSET ?2
`

type ListBotsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListBots(ctx context.Context, arg ListBotsParams) ([]Bot, error) {
	rows, err := q.db.QueryContext(ctx, listBots, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bot{}
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBotsByAuthor = `-- name: ListBotsByAuthor :many
SELECT id, author, name, description, status, created_at FROM bots
WHERE author = ?1
ORDER BY created_at DESC
LIMIT ?2 OFFSET ?3
`

type ListBotsByAuthorParams struct {
	Author string `json:"author"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) ListBotsByAuthor(ctx context.Context, arg ListBotsByAuthorParams) ([]Bot, error) {
	rows, err := q.db.QueryContext(ctx, listBotsByAuthor, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bot{}
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBotsByStatus = `-- name: ListBotsByStatus :many
SELECT id, author, name, description, status, created_at FROM bots
WHERE status = ?1
ORDER BY created_at DESC
LIMIT ?2 OFFSET ?3
`

type ListBotsByStatusParams struct {
	Status string `json:"status"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) ListBotsByStatus(ctx context.Context, arg ListBotsByStatusParams) ([]Bot, error) {
	rows, err := q.db.QueryContext(ctx, listBotsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bot{}
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBot = `-- name: UpdateBot :one
UPDATE bots
SET
    name        = COALESCE(?1, name),
    description = COALESCE(?2, description),
    status      = COALESCE(?3, status)
WHERE id = ?4
RETURNING id, author, name, description, status, created_at
`

type UpdateBotParams struct {
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Status      sql.NullString `json:"status"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateBot(ctx context.Context, arg UpdateBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, updateBot,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
