// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username) 
VALUES (?1, ?2)
RETURNING id, username, created_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, created_at FROM users
WHERE id = ?1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, created_at FROM users
ORDER BY created_at DESC
LIMIT ?1 OFFSET ?2
`

type ListUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE users
SET username = ?2
WHERE id = ?1
RETURNING id, username, created_at
`

type UpdateUsernameParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}
